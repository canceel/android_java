package com.yh.vssService.comm.web;

import java.io.IOException;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.alibaba.fastjson.JSONObject;
import com.config.Config;
import com.yh.vssService.comm.service.CommService;
import com.yh.vssService.storeSign.service.IStoreSignService;
import com.yh.vssService.util.FtpUtils;

@Controller
@RequestMapping("/vssService/commAction.do")
public class CommAction extends BaseController{
	
	static Logger log=Logger.getLogger(CommAction.class);
	@Autowired
	private CommService commService;
	@Autowired
	private IStoreSignService storeSignService;
	
	@RequestMapping(params = "method=getSignToken",consumes="application/json")
	public void getSignToken(HttpServletRequest request,HttpServletResponse response){
		JSONObject result = new JSONObject();
		String appId="";
		try{
			appId=request.getParameter("appId");
			if(appId==null||"".equals(appId)){
				result.put("code", "300");
				result.put("message", "appId为空!");
				return;
			}
			Map<String, Object> tokenMap = commService.getSignToken(appId);
			
			result.put("code", 200);
			result.put("message", "获取signToken成功！");
			JSONObject signTokenObj = new JSONObject();
			signTokenObj.put("signToken", tokenMap.get("signToken"));
			signTokenObj.put("tokenTime", tokenMap.get("tokenTime"));
			signTokenObj.put("sessionTimeOut", tokenMap.get("sessionTimeOut"));
			signTokenObj.put("tokenTimeOut", tokenMap.get("tokenTimeOut"));
			signTokenObj.put("syscode",  tokenMap.get("syscode"));
			signTokenObj.put("sysmessage", tokenMap.get("sysmessage"));
			result.put("data", signTokenObj);
		}catch(Exception exp){
			exp.printStackTrace();
			log.error(exp);
			result.put("code", "400");
			result.put("message", exp.getMessage());
		}finally{
			if("GLZX_03".equals(appId)){
				jsonService.writeJson(response, "callback("+result.toJSONString()+")");
			}else{
				jsonService.writeJson(response, result.toJSONString());
			}
		}
	}
	
	/**
	 * @author chaney
	 * @param data
	 * @param request
	 * @param response
	 * @param session
	 * 使用日志记录
	 */
	@RequestMapping(params = "method=writeLog",consumes="application/json")
	public void writeLog(HttpServletRequest request,HttpServletResponse response,HttpSession session){
		JSONObject result=new JSONObject();
		try{
			Map<String,Object> checkMap = commService.interfaceCheck(request);
			if(!"200".equals(checkMap.get("code").toString())){
				result.put("code", checkMap.get("code"));
				result.put("message", checkMap.get("message"));
				return;
			}
			String data = request.getParameter("data");
			System.out.println("业务参数："+data);
			if(data==null||"".equals(data)){
				result.put("code", 300);
				result.put("message", "传入业务参数为空!");
				return;
			}
			//业务参数
			JSONObject paramData=JSONObject.parseObject(data);
			String loginId=paramData.getString("loginId");
			String moduleCode = paramData.getString("moduleId");
			String appId = request.getParameter("appId");
			
			commService.writeLog(loginId,moduleCode,appId,"CX");
			
			result.put("code", 200);
			result.put("message", "日志写入成功!");
		}catch(Exception exp){
			exp.printStackTrace();
			log.error(exp);
			result.put("code", 400);
			result.put("message", exp.getMessage());  
		}finally{
			System.out.println(result.toJSONString());
			jsonService.writeJson(response, "callback("+result.toJSONString()+")");
		}
	}
	
	
	/**
	 * 
	 * @Description: 查询LOV值
	 * @author YH_ding 
	 * @Created 2016-8-31下午4:01:26
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	@RequestMapping(params = "method=getLov",consumes="application/json")
	public void getLov(HttpServletRequest request,HttpServletResponse response,HttpSession session) throws IOException{
		JSONObject result=new JSONObject();
		try{
			String type=request.getParameter("type");
//			List<Map<String, Object>> list=commonService.getLov(type);
			String jsonStr = commService.getLov(type);
			jsonService.writeJson(response, "callback("+jsonStr+")");
		}catch(Exception exp){
			exp.printStackTrace();
		}
	}
	
	/**
	 * 图片上传
	 * @param request
	 * @param response
	 * @param session
	 */
	@RequestMapping(params = "method=uploadPic",consumes="application/json")
	public void uploadPic(HttpServletRequest request,HttpServletResponse response,HttpSession session){
		JSONObject result=new JSONObject();
		FtpUtils ftpUtils=null;
		String uploadFileName="";
		int num=0;
		int insertFlag=0;
		boolean successFlag=false;
		String appId="";
		String picPath="";
		String imageUrl="";
		try{
			appId=request.getParameter("appId");
			Map<String,Object> checkMap = commService.interfaceCheck(request);
			if(!"200".equals(checkMap.get("code").toString())){
				result.put("code", checkMap.get("code"));
				result.put("message", checkMap.get("message"));
				return;
			}
			String data = request.getParameter("data");
			JSONObject paramData=JSONObject.parseObject(data);
			String usedType = paramData.getString("usedType");
			String ftpPath=Config.getString("FTPPATH");
			if(usedType==null || usedType.equals("")){
				result.put("code",300);
				result.put("message", "图片使用类型不能为空!");
				return;
			}
			if(usedType.equals("0")){
				picPath=Config.getString("FTPSTORESIGNPATH");
			}else if(usedType.equals("1")){
				picPath=Config.getString("FTPJOINYHPATH");
			}else{
				result.put("code",300);
				result.put("message", "图片使用类型不存在!");
				return;
			}
			MultipartHttpServletRequest mhs = (MultipartHttpServletRequest) request;
			//picFile为表单文件名
			MultipartFile mf = mhs.getFile("picfile");
			
			if(mf==null){
				result.put("code", 300);
				result.put("message", "图片上传失败，未获取图片信息!");
				return;
			}
			//获取文件名并带日期格式
			if("GLZX_03".equals(appId)){
				uploadFileName = request.getParameter("picName").trim();
			}else{
				uploadFileName = mf.getOriginalFilename();
			}
			String[] picName=uploadFileName.split("_");
			if(picName.length<3){
				result.put("code", 300);
				result.put("message", "图片上传失败，图片命名错误!");
				return;
			}
			long uploadFileSize = mf.getSize();
			if (uploadFileSize > 0) {
				int maxSize=0;
				if(usedType.equals("0")){
					maxSize = Integer.parseInt(Config.getString("PICSIZE"));
				}else if(usedType.equals("1")){
					maxSize = Integer.parseInt(Config.getString("PICSIZE_JOINYH"));
				}
				if(maxSize==0){
					result.put("code", 300);
					result.put("message", "获取图片大小上限失败！");
					return;
				}
				if(uploadFileSize > maxSize){
					result.put("code", 300);
					result.put("message", "图片不能超过"+maxSize/(1*1024*1024)+"M!");
					return;
				}else{
					ftpUtils = new FtpUtils(Config.getString("FTPIP"), Integer.parseInt(Config.getString("FTPPORT")), Config.getString("FTPNAME"), Config.getString("FTPPWD"));
					//打开ftp链接
					ftpUtils.connectFTPServer();	
					if(!ftpUtils.changeDirectory(ftpPath + picPath+ "/")){// 判断文件夹是否存在
						ftpUtils.createFold(ftpPath + picPath+ "/");// 创建文件夹
					}
					if(!ftpUtils.changeDirectory(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
							+ "/")){// 判断文件夹是否存在
						ftpUtils.createFold(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
								+ "/");// 创建文件夹
					}
					if (!ftpUtils.changeDirectory(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
							+ "/" + picName[1]+"/")) {// 判断文件夹是否存在
						ftpUtils.createFold(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
								+ "/" + picName[1]+"/");// 创建文件夹
					}
					successFlag= ftpUtils.uploadFile(mf.getInputStream(), uploadFileName, ftpPath + picPath+ "/" + picName[0].substring(0, 8)+ "/" + picName[1]+"/");					
				}
			}
			if(successFlag){
				String[] picCode=(picName[0]+picName[1]+picName[2]).split("\\.");
				imageUrl=Config.getString("HTTP") + picPath+ "/" + picName[0].substring(0, 8)
						+ "/" + picName[1]+"/"+uploadFileName;
				insertFlag=storeSignService.insertPic(picCode[0],imageUrl, "1",  picName[1]);
			}
			JSONObject jsonData = new JSONObject();
			jsonData.put("uploadFlag", insertFlag);
			jsonData.put("imageUrl", imageUrl);
			if(insertFlag>0){
				result.put("code", 200);
				result.put("message", "操作成功!");
				result.put("data",jsonData);
			}else{
				result.put("code", 300);
				result.put("message", "图片上传失败");
				result.put("data",jsonData);
			}	
		}catch(Exception exp){
			exp.printStackTrace();
			log.error(exp);
			result.put("code", 400);
			result.put("message", exp.getMessage());
		}finally{
			try {
				if(ftpUtils!=null){
					ftpUtils.closeFTPClient();
				}
			} catch (Exception e) {
				log.error(e.getMessage());
				e.printStackTrace();
			}
			System.out.println(result.toJSONString());
			if("GLZX_03".equals(appId)){
				jsonService.writeJson(response, "callback("+result.toString()+")");
//				jsonService.writeJson(response, result.toString());
			}else{
				jsonService.writeJson(response, result.toString());
			}
		}
	}
	
	/**
	 * 图片上传
	 * @param request
	 * @param response
	 * @param session
	 */
	@RequestMapping(params = "method=upPic")
	public void upPic(HttpServletRequest request,HttpServletResponse response,HttpSession session){
		
		JSONObject result=new JSONObject();
		String uploadFileName="";
		int num=0;
		int insertFlag=0;
		boolean successFlag=false;
		String appId="";
		String picPath="";
		String imageUrl="";
		try{
			appId=request.getParameter("appId");
			Map<String,Object> checkMap = commService.interfaceCheck(request);
			if(!"200".equals(checkMap.get("code").toString())){
				result.put("code", checkMap.get("code"));
				result.put("message", checkMap.get("message"));
				return;
			}
			String data = request.getParameter("data");
			JSONObject paramData=JSONObject.parseObject(data);
			String usedType = paramData.getString("usedType");
			String ftpPath=Config.getString("FTPPATH");
			if(usedType==null || usedType.equals("")){
				result.put("code",300);
				result.put("message", "图片使用类型不能为空!");
				return;
			}
			if(usedType.equals("0")){
				picPath=Config.getString("FTPSTORESIGNPATH");
			}else if(usedType.equals("1")){
				picPath=Config.getString("FTPJOINYHPATH");
			}else{
				result.put("code",300);
				result.put("message", "图片使用类型不存在!");
				return;
			}
			MultipartHttpServletRequest mhs = (MultipartHttpServletRequest) request;
			//picFile为表单文件名
			MultipartFile mf = mhs.getFile("picfile");
			
			if(mf==null){
				result.put("code", checkMap.get("code"));
				result.put("message", "图片上传失败，未获取图片信息!");
				return;
			}
			//获取文件名并带日期格式
//			uploadFileName = mf.getOriginalFilename();
			uploadFileName = request.getParameter("picName");
			String[] picName=uploadFileName.split("_");
			if(picName.length<3){
				result.put("code", checkMap.get("code"));
				result.put("message", "图片上传失败，图片命名错误!");
				return;
			}
			long uploadFileSize = mf.getSize();
			if (uploadFileSize > 0) {
				if(uploadFileSize > Integer.parseInt(Config.getString("PICSIZE"))){
					result.put("code", checkMap.get("code"));
					result.put("message", "图片上传失败，图片太大!");
					return;
				}else{
				FtpUtils ftpUtils = new FtpUtils(Config.getString("FTPIP"), Integer.parseInt(Config.getString("FTPPORT")), Config.getString("FTPNAME"), Config.getString("FTPPWD"));
					//打开ftp链接
			        ftpUtils.connectFTPServer();	
			        if(!ftpUtils.changeDirectory(ftpPath + picPath+ "/")){// 判断文件夹是否存在
			        	ftpUtils.createFold(ftpPath + picPath+ "/");// 创建文件夹
			        }
			        if(!ftpUtils.changeDirectory(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
							+ "/")){// 判断文件夹是否存在
			        	ftpUtils.createFold(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
								+ "/");// 创建文件夹
			        }
			        if (!ftpUtils.changeDirectory(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
							+ "/" + picName[1]+"/")) {// 判断文件夹是否存在
			        	ftpUtils.createFold(ftpPath + picPath+ "/" + picName[0].substring(0, 8)
								+ "/" + picName[1]+"/");// 创建文件夹
					}
			        successFlag= ftpUtils.uploadFile(mf.getInputStream(), uploadFileName, ftpPath + picPath+ "/" + picName[0].substring(0, 8)+ "/" + picName[1]+"/");					
				}
			}
			if(successFlag){
			String[] picCode=(picName[0]+picName[1]+picName[2]).split("\\.");
				imageUrl=Config.getString("HTTP") + picPath+ "/" + picName[0].substring(0, 8)
						+ "/" + picName[1]+"/"+uploadFileName;
				insertFlag=storeSignService.insertPic(picCode[0],imageUrl, "1",  picName[1]);
			}
			JSONObject jsonData = new JSONObject();
			jsonData.put("uploadFlag", insertFlag);
			jsonData.put("imageUrl", imageUrl);
			if(insertFlag>0){
				result.put("code", 200);
				result.put("message", "操作成功!");
				result.put("data",jsonData);
			}else{
				result.put("code", 300);
				result.put("message", "图片上传失败");
				result.put("data",jsonData);
			}	
		}catch(Exception exp){
				exp.printStackTrace();
				log.error(exp);
				result.put("code", 400);
				result.put("message", exp.getMessage());
		}finally{
				System.out.println(result.toJSONString());
				if("GLZX_03".equals(appId)){
//					jsonService.writeJson(response, "callback("+result.toString()+")");
					jsonService.writeJson(response, result.toString());
				}else{
					jsonService.writeJson(response, result.toString());
				}
		}
	}
}

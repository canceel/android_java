<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/jee
		http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd"
	default-lazy-init="false">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
				<value>classpath*:task.properties</value>
			</list>
		</property>
	</bean>
    
	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.allipper.*">
	</context:component-scan>
	<bean id="sessionFilter" class="com.allipper.common.service.filter.SessionFilter"></bean>
	<!-- druid proxyFilters -->
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="resultSetLogEnabled" value="true" />
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>

    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="30000" />
        <property name="logSlowSql" value="true" />
        <property name="mergeSql" value="true" /> 
    </bean>

    <bean id="stat-filter-other" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="30000" />
        <property name="logSlowSql" value="true" />
    </bean>
    
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
    	<property name="config" ref="wall-config" />
    </bean> 
    
    <bean id="wall-config" class="com.alibaba.druid.wall.WallConfig">  
        <property name="strictSyntaxCheck" value="false" />
    </bean>
	
	<!-- 项目脚本-数据源配置-->
	<!-- vss数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxActive" value="${maxActive}" />
		<property name="maxIdle" value="${maxIdle}" />
		<property name="minIdle" value="${minIdle}" />
		<property name="maxWait" value="${maxWait}" />
		<property name="poolPreparedStatements" value="false" />
		<property name="defaultAutoCommit" value="false" />
		
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" /> 
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" /> 
		
		<property name="validationQuery" value="${validationQuery}" />  
        <property name="testWhileIdle" value="${testWhileIdle}" />  
        <property name="testOnBorrow" value="${testOnBorrow}" />  
        <property name="testOnReturn" value="${testOnReturn}" />  
        <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />  
        <property name="removeAbandoned" value="${removeAbandoned}" /> <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" /> <!-- 1800秒，也就是30分钟 -->  
        <property name="logAbandoned" value="${logAbandoned}" /> <!-- 关闭abanded连接时输出错误日志 -->  
        
        <property name="filters" value="${filters}" />    
        <property name="proxyFilters">
        	<list>
        		<ref  bean="stat-filter"/>
         		<ref  bean="wall-filter"/> 
        		<ref  bean="log-filter"/>
        	</list>
       	</property>
	</bean>

	<bean id="nativeJdbcExtractor" lazy-init="true"
		class="org.springframework.jdbc.support.nativejdbc.WebSphereNativeJdbcExtractor" />
	<bean id="lobHandler" lazy-init="true"
		class="org.springframework.jdbc.support.lob.OracleLobHandler">
		<property name="nativeJdbcExtractor">
			<ref bean="nativeJdbcExtractor" />
		</property>
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	
		<!--指定实体类映射文件，可以指定同时指定某一包以及子包下面的所有配置文件，
		mapperLocations和configLocation有一个即可，当需要为实体类指定别名时，
		可指定configLocation属性，再在mybatis总配置文件中采用mapper引入实体类映射文件 
		<property name="configLocation" value="classpath:sqlmapconfig.xml"></property>-->
		
		<property name="mapperLocations" value="classpath:com/allipper/common/*/*/mybatis/*.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>


	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" /> 
	</bean>
	
	

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
		<qualifier value="vssManager"></qualifier>
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 对象池 -->
	<bean name="genericObjectPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig" >
			<property name="maxWaitMillis" value="3000" />
			<property name="maxTotal" value="1000" />
			<property name="minIdle" value="8" />
			<property name="maxIdle" value="100" />
	</bean>
	<!-- redis缓存 -->
	<bean id="jedisClusterFactory" class="com.allipper.common.service.comm.service.JedisClusterFactory">
		<property name="hostset" >
		<set>
			<bean class="redis.clients.jedis.HostAndPort" >
			<constructor-arg name="host"  value="${redis.host1}"/>
			<constructor-arg name="port"  value="${redis.port1}"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
			<constructor-arg name="host"  value="${redis.host2}"/>
			<constructor-arg name="port"  value="${redis.port2}"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
			<constructor-arg name="host"  value="${redis.host3}"/>
			<constructor-arg name="port"  value="${redis.port3}"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort" >
			<constructor-arg name="host"  value="${redis.host4}"/>
			<constructor-arg name="port"  value="${redis.port4}"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
			<constructor-arg name="host"  value="${redis.host5}"/>
			<constructor-arg name="port"  value="${redis.port5}"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
			<constructor-arg name="host"  value="${redis.host6}"/>
			<constructor-arg name="port"  value="${redis.port6}"/>
			</bean>
			</set>
		</property>
		<property name="timeout" value="${redis.timeout}" />
		<property name="maxRedirections" value="${redis.maxRedirections}" />
		<property name="genericObjectPoolConfig" ref="genericObjectPoolConfig" />
	</bean>
</beans>
